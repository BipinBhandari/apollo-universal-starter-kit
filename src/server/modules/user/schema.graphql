extend type Query {
  # Get all users, possibly filtered and ordered
  users(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    offset: Int
    limit: Int
  ): [User]

  # Get all users, possibly filtered and ordered
  pagingUsers(
    filters: [FilterInput]
    orderBys: [OrderByInput]
    groupBys: [GroupByInput]
    offset: Int
    limit: Int
  ): PagingUsersResponse

  # Get user by id
  user(id: String!): User

  # Get current user
  currentUser: User
}

extend type Mutation {
  # Create new user
  addUser(input: AddUserInput!): UserPayload!
  # Edit a user
  editUser(input: EditUserInput!): UserPayload!
  # Delete a user
  deleteUser(id: String!): UserPayload!
}

extend type Subscription {
}

#
# User Types
#

type PagingUsersResponse {
  data: [User]
  total: Int
  pages: Int
}

type UserPayload {
  user: User
  tokens: Tokens
  errors: [FieldError!]
}

type User {
  createdAt: String
  updatedAt: String

  id: String!
  email: String!
  isActive: Boolean

  profile: UserProfile
}

type UserProfile {
  createdAt: String
  updatedAt: String

  displayName: String
  firstName: String
  middleName: String
  lastName: String
  title: String
  suffix: String
  language: String
  locale: String

  emails: [String]
}

input AddUserInput {
  email: String!
  profile: ProfileInput
}

input EditUserInput {
  id: String!
  email: String
  profile: ProfileInput
}

input ProfileInput {
  displayName: String
  firstName: String
  middleName: String
  lastName: String
  title: String
  suffix: String
  language: String
  locale: String

  emails: [String]
}
